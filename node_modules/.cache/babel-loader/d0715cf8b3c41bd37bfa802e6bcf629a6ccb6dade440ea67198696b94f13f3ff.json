{"ast":null,"code":"var _jsxFileName = \"/Users/Meca/Documents/Web Projects/world-quiz/src/containers/Game/game.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Button, Grid, Paper, TableBody, TableCell, TableHead, TableRow, Typography } from \"@mui/material\";\nimport TextField from \"@mui/material/TextField\";\nimport { StyledContainer, StyledGrid, StyledGrid1, StyledTable, StyledTableCell4, StyledTableContainer } from \"../../styles/game\";\nimport AccessAlarmIcon from \"@mui/icons-material/AccessAlarm\";\nimport { PlayerContext } from \"./PlayerContext\";\nimport countriesData from \"../../scripts/countries.json\";\n//import startTimer from \"./timer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [score, setScore] = useState(0);\n  const [answer, setAnswer] = useState(\"\");\n  const [currentCountry, setCurrentCountry] = useState(\"\");\n  const [quizEnded, setQuizEnded] = useState(false);\n  const [helperText, setHelperText] = useState(\"\");\n  const [answeredCountries, setAnsweredCountries] = useState([]);\n  const {\n    counter,\n    setCounter,\n    initialCounter\n  } = useContext(PlayerContext);\n  //const formattedTime = startTimer(counter);\n  const [previousCountry, setPreviousCountry] = useState(\"\");\n  const [unansweredCountries, setUnansweredCountries] = useState([]);\n  const [groupedCountries, setGroupedCountries] = useState({\n    Africa: [],\n    Antarctica: [],\n    Asia: [],\n    Europe: [],\n    \"North America\": [],\n    Oceania: [],\n    \"South America\": []\n  });\n  useEffect(() => {\n    setAnsweredCountries(countriesData);\n  }, []);\n  useEffect(() => {\n    const unanswered = countriesData.filter(country => !answeredCountries.includes(country.country));\n    setUnansweredCountries(unanswered.sort((a, b) => a.country.localeCompare(b.country)));\n  }, [answeredCountries]);\n  const handleInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setAnswer(value);\n\n    // Check if the user's answer matches any country in the JSON data\n    const matchingCountry = countriesData.find(country => country.country.toLowerCase() === value.toLowerCase());\n    if (matchingCountry) {\n      if (answeredCountries.includes(matchingCountry.country)) {\n        // alert(\"You've already answered this country!\");\n        setHelperText(`${matchingCountry.country} already entered`);\n        return;\n      } else if (matchingCountry.country === previousCountry) {\n        setHelperText(`${matchingCountry.country} already entered. Enter a new country.`);\n      } else {\n        // If the user's answer matches a country, update the current country and reset the answer\n        const updatedAnsweredCountries = [...answeredCountries, matchingCountry.country].sort();\n        setCurrentCountry(updatedAnsweredCountries);\n        setPreviousCountry(matchingCountry.country);\n        setAnswer(\"\");\n        setScore(score + 1); // Update the score\n        setAnsweredCountries(updatedAnsweredCountries);\n\n        // Update the grouped countries state with the new country\n        const newGroupedCountries = {\n          ...groupedCountries\n        };\n        const continent = matchingCountry.continent;\n        newGroupedCountries[continent] = [...newGroupedCountries[continent], matchingCountry.country].sort();\n        setGroupedCountries(newGroupedCountries);\n      }\n    } else {\n      setHelperText(\"\");\n    }\n  };\n  const handleEndQuiz = () => {\n    setScore(0);\n    setAnsweredCountries([]);\n    setAnswer(\"\");\n    setHelperText(\"\");\n    setQuizEnded(true);\n    // reload page when \"end quiz\" button is clicked\n    window.location.reload();\n  };\n\n  // maths function to convert seconds to 00:00 format\n  function secondsToHms(counter) {\n    let d = Number(counter);\n\n    // maths logic that returns minutes and seconds\n    if (d <= 0) {\n      return \"00:00:00\";\n    } else {\n      let m = Math.floor(d % 3600 / 60);\n      let s = Math.floor(d % 3600 % 60);\n      let mDisplay = m <= 9 ? \"0\" + m + \":\" : m + \":\";\n      let sDisplay = s <= 9 ? \"0\" + s : s;\n      return mDisplay + sDisplay;\n    }\n  }\n\n  // define a function to handle the timer tick\n  const handleTimerTick = () => {\n    // update the remaining time\n    setCounter(time => time - 1);\n  };\n  // start the timer when the component mounts\n  React.useEffect(() => {\n    const timer = setInterval(handleTimerTick, 1000);\n\n    // clean up the timer when the component unmounts\n    return () => clearInterval(timer);\n  }, []);\n  React.useEffect(() => {\n    if (counter === 0) {\n      handleEndQuiz();\n    }\n  }, [counter]);\n  return /*#__PURE__*/_jsxDEV(StyledContainer, {\n    maxWidth: \"md\",\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      id: \"country\",\n      label: \"Enter country here\",\n      variant: \"outlined\",\n      value: answer,\n      onChange: handleInputChange,\n      placeholder: \"Enter country here\",\n      helperText: helperText,\n      error: Boolean(helperText),\n      disabled: quizEnded,\n      sx: {\n        marginTop: 6\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledGrid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"Your current score is: \", score, \"/195\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledGrid1, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          item: true,\n          color: \"secondary\",\n          \"data-testid\": \"count\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(AccessAlarmIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this), \" \", secondsToHms(counter), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleEndQuiz,\n          children: score === 0 ? \"Start Quiz\" : \"End Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(StyledTableContainer, {\n          component: Paper,\n          children: /*#__PURE__*/_jsxDEV(StyledTable, {\n            \"aria-label\": \"simple table\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(StyledTableCell4, {\n                  align: \"center\",\n                  children: \"Continent\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"center\",\n                  children: \"Countries\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: Object.keys(groupedCountries).map(continent => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(StyledTableCell4, {\n                  align: \"center\",\n                  children: continent\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: groupedCountries[continent].join(\", \")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 21\n                }, this)]\n              }, continent, true, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"o4iGcHdggmRnko0OYEvuzXsJlYM=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Button","Grid","Paper","TableBody","TableCell","TableHead","TableRow","Typography","TextField","StyledContainer","StyledGrid","StyledGrid1","StyledTable","StyledTableCell4","StyledTableContainer","AccessAlarmIcon","PlayerContext","countriesData","jsxDEV","_jsxDEV","Game","_s","score","setScore","answer","setAnswer","currentCountry","setCurrentCountry","quizEnded","setQuizEnded","helperText","setHelperText","answeredCountries","setAnsweredCountries","counter","setCounter","initialCounter","previousCountry","setPreviousCountry","unansweredCountries","setUnansweredCountries","groupedCountries","setGroupedCountries","Africa","Antarctica","Asia","Europe","Oceania","unanswered","filter","country","includes","sort","a","b","localeCompare","handleInputChange","event","value","target","matchingCountry","find","toLowerCase","updatedAnsweredCountries","newGroupedCountries","continent","handleEndQuiz","window","location","reload","secondsToHms","d","Number","m","Math","floor","s","mDisplay","sDisplay","handleTimerTick","time","timer","setInterval","clearInterval","maxWidth","children","id","label","variant","onChange","placeholder","error","Boolean","disabled","sx","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","container","item","color","onClick","component","align","Object","keys","map","join","_c","$RefreshReg$"],"sources":["/Users/Meca/Documents/Web Projects/world-quiz/src/containers/Game/game.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Paper,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@mui/material\";\nimport TextField from \"@mui/material/TextField\";\nimport {\n  StyledContainer,\n  StyledGrid,\n  StyledGrid1,\n  StyledTable,\n  StyledTableCell4,\n  StyledTableContainer,\n} from \"../../styles/game\";\nimport AccessAlarmIcon from \"@mui/icons-material/AccessAlarm\";\nimport { PlayerContext } from \"./PlayerContext\";\nimport countriesData from \"../../scripts/countries.json\";\n//import startTimer from \"./timer\";\n\nconst Game = () => {\n  const [score, setScore] = useState(0);\n  const [answer, setAnswer] = useState(\"\");\n  const [currentCountry, setCurrentCountry] = useState(\"\");\n  const [quizEnded, setQuizEnded] = useState(false);\n  const [helperText, setHelperText] = useState(\"\");\n  const [answeredCountries, setAnsweredCountries] = useState([]);\n  const { counter, setCounter, initialCounter } = useContext(PlayerContext);\n  //const formattedTime = startTimer(counter);\n  const [previousCountry, setPreviousCountry] = useState(\"\");\n  const [unansweredCountries, setUnansweredCountries] = useState([]);\n  const [groupedCountries, setGroupedCountries] = useState({\n    Africa: [],\n    Antarctica: [],\n    Asia: [],\n    Europe: [],\n    \"North America\": [],\n    Oceania: [],\n    \"South America\": [],\n  });\n\n  useEffect(() => {\n    setAnsweredCountries(countriesData);\n  }, []);\n\n  useEffect(() => {\n    const unanswered = countriesData.filter(\n      (country) => !answeredCountries.includes(country.country)\n    );\n    setUnansweredCountries(\n      unanswered.sort((a, b) => a.country.localeCompare(b.country))\n    );\n  }, [answeredCountries]);\n\n  const handleInputChange = (event) => {\n    const { value } = event.target;\n    setAnswer(value);\n\n    // Check if the user's answer matches any country in the JSON data\n    const matchingCountry = countriesData.find(\n      (country) => country.country.toLowerCase() === value.toLowerCase()\n    );\n    if (matchingCountry) {\n      if (answeredCountries.includes(matchingCountry.country)) {\n        // alert(\"You've already answered this country!\");\n        setHelperText(`${matchingCountry.country} already entered`);\n        return;\n      } else if (matchingCountry.country === previousCountry) {\n        setHelperText(\n          `${matchingCountry.country} already entered. Enter a new country.`\n        );\n      } else {\n        // If the user's answer matches a country, update the current country and reset the answer\n        const updatedAnsweredCountries = [\n          ...answeredCountries,\n          matchingCountry.country,\n        ].sort();\n        setCurrentCountry(updatedAnsweredCountries);\n        setPreviousCountry(matchingCountry.country);\n        setAnswer(\"\");\n        setScore(score + 1); // Update the score\n        setAnsweredCountries(updatedAnsweredCountries);\n\n        // Update the grouped countries state with the new country\n        const newGroupedCountries = { ...groupedCountries };\n        const continent = matchingCountry.continent;\n        newGroupedCountries[continent] = [\n          ...newGroupedCountries[continent],\n          matchingCountry.country,\n        ].sort();\n        setGroupedCountries(newGroupedCountries);\n      }\n    } else {\n      setHelperText(\"\");\n    }\n  };\n\n  const handleEndQuiz = () => {\n    setScore(0);\n    setAnsweredCountries([]);\n    setAnswer(\"\");\n    setHelperText(\"\");\n    setQuizEnded(true);\n    // reload page when \"end quiz\" button is clicked\n    window.location.reload();\n  };\n\n  // maths function to convert seconds to 00:00 format\n  function secondsToHms(counter) {\n    let d = Number(counter);\n\n    // maths logic that returns minutes and seconds\n    if (d <= 0) {\n      return \"00:00:00\";\n    } else {\n      let m = Math.floor((d % 3600) / 60);\n      let s = Math.floor((d % 3600) % 60);\n\n      let mDisplay = m <= 9 ? \"0\" + m + \":\" : m + \":\";\n      let sDisplay = s <= 9 ? \"0\" + s : s;\n\n      return mDisplay + sDisplay;\n    }\n  }\n\n  // define a function to handle the timer tick\n  const handleTimerTick = () => {\n    // update the remaining time\n    setCounter((time) => time - 1);\n  };\n  // start the timer when the component mounts\n  React.useEffect(() => {\n    const timer = setInterval(handleTimerTick, 1000);\n\n    // clean up the timer when the component unmounts\n    return () => clearInterval(timer);\n  }, []);\n  React.useEffect(() => {\n    if (counter === 0) {\n      handleEndQuiz();\n    }\n  }, [counter]);\n\n  return (\n    <StyledContainer maxWidth=\"md\">\n      <TextField\n        id=\"country\"\n        label=\"Enter country here\"\n        variant=\"outlined\"\n        value={answer}\n        onChange={handleInputChange}\n        placeholder=\"Enter country here\"\n        helperText={helperText}\n        error={Boolean(helperText)}\n        disabled={quizEnded}\n        sx={{ marginTop: 6 }}\n      />\n      <StyledGrid container>\n        <Grid item>\n          <Typography>Your current score is: {score}/195</Typography>\n        </Grid>\n        <StyledGrid1 item>\n          <Button item color=\"secondary\" data-testid=\"count\">\n            {\" \"}\n            <AccessAlarmIcon /> {secondsToHms(counter)}{\" \"}\n          </Button>\n        </StyledGrid1>\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\" onClick={handleEndQuiz}>\n            {score === 0 ? \"Start Quiz\" : \"End Quiz\"}\n          </Button>\n        </Grid>\n      </StyledGrid>\n      <Grid>\n        <Grid item>\n          <StyledTableContainer component={Paper}>\n            <StyledTable aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <StyledTableCell4 align=\"center\">Continent</StyledTableCell4>\n                  <TableCell align=\"center\">Countries</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {Object.keys(groupedCountries).map((continent) => (\n                  <TableRow key={continent}>\n                    <StyledTableCell4 align=\"center\">\n                      {continent}\n                    </StyledTableCell4>\n                    <TableCell>\n                      {groupedCountries[continent].join(\", \")}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </StyledTable>\n          </StyledTableContainer>\n        </Grid>\n      </Grid>\n    </StyledContainer>\n  );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}