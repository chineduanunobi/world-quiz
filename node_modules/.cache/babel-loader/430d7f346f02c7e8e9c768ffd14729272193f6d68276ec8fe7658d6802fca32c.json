{"ast":null,"code":"var _jsxFileName = \"/Users/Meca/Documents/Web Projects/world-quiz/src/containers/Game/game.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Button, Grid, Paper, TableBody, TableCell, TableHead, TableRow, Typography } from \"@mui/material\";\nimport TextField from \"@mui/material/TextField\";\nimport { StyledButton, StyledContainer, StyledGrid, StyledGrid1, StyledTable, StyledTableCell4, StyledTableContainer } from \"../../styles/game\";\nimport AccessAlarmIcon from \"@mui/icons-material/AccessAlarm\";\nimport { PlayerContext } from \"./PlayerContext\";\nimport countriesData from \"../../scripts/countries.json\";\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\nimport PauseIcon from \"@mui/icons-material/Pause\";\n//import startTimer from \"./timer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [score, setScore] = useState(0);\n  const [answer, setAnswer] = useState(\"\");\n  const [currentCountry, setCurrentCountry] = useState(\"\");\n  const [quizEnded, setQuizEnded] = useState(false);\n  const [helperText, setHelperText] = useState(\"\");\n  const [answeredCountries, setAnsweredCountries] = useState([]);\n  const {\n    counter,\n    setCounter\n  } = useContext(PlayerContext);\n  const [isPaused, setIsPaused] = React.useState(false);\n  //const formattedTime = startTimer(counter);\n  const [previousCountry, setPreviousCountry] = useState(\"\");\n  const [unansweredCountries, setUnansweredCountries] = useState([]);\n  const [groupedCountries, setGroupedCountries] = useState({\n    Africa: [],\n    Antarctica: [],\n    Asia: [],\n    Europe: [],\n    \"North America\": [],\n    Oceania: [],\n    \"South America\": []\n  });\n  useEffect(() => {\n    setAnsweredCountries(countriesData);\n  }, []);\n  useEffect(() => {\n    const unanswered = countriesData.filter(country => !answeredCountries.includes(country.country));\n    setUnansweredCountries(unanswered.sort((a, b) => a.country.localeCompare(b.country)));\n  }, [answeredCountries]);\n  const handleInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setAnswer(value);\n\n    // Check if the user's answer matches any country in the JSON data\n    const matchingCountry = countriesData.find(country => country.country.toLowerCase() === value.toLowerCase());\n    if (matchingCountry) {\n      if (answeredCountries.includes(matchingCountry.country)) {\n        // alert(\"You've already answered this country!\");\n        setHelperText(`${matchingCountry.country} already entered`);\n        return;\n      } else if (matchingCountry.country === previousCountry) {\n        setHelperText(`${matchingCountry.country} already entered. Enter a new country.`);\n      } else {\n        // If the user's answer matches a country, update the current country and reset the answer\n        const updatedAnsweredCountries = [...answeredCountries, matchingCountry.country].sort();\n        setCurrentCountry(matchingCountry.country);\n        setPreviousCountry(matchingCountry.country);\n        setAnswer(\"\");\n        setScore(score + 1); // Update the score\n        setAnsweredCountries(updatedAnsweredCountries);\n        if (!unansweredCountries.includes(matchingCountry)) {\n          setHelperText(\"\");\n        } else {\n          const filteredUnansweredCountries = unansweredCountries.filter(country => country.country !== matchingCountry.country);\n          setUnansweredCountries(filteredUnansweredCountries.sort((a, b) => a.country.localeCompare(b.country)));\n          setHelperText(\"\");\n        }\n\n        // Update the grouped countries state with the new country\n        const newGroupedCountries = {\n          ...groupedCountries\n        };\n        const continent = matchingCountry.continent;\n        newGroupedCountries[continent] = [...newGroupedCountries[continent], matchingCountry.country].sort();\n        setGroupedCountries(newGroupedCountries);\n      }\n    } else {\n      setHelperText(\"\");\n    }\n  };\n  const handleStartQuiz = () => {\n    // reload page when \"start quiz\" button is clicked\n    window.location.reload();\n  };\n\n  /*In the handleQuizButtonClick function, the handleEndQuiz function should not be called if quizEnded is already true. */\n\n  const handleEndQuiz = () => {\n    setScore(0);\n    setAnsweredCountries([]);\n    setAnswer(\"\");\n    setHelperText(\"\");\n    setQuizEnded(true);\n    // reload page when \"end quiz\" button is clicked\n    //window.location.reload();\n    setCounter(0);\n  };\n  const handleQuizButtonClick = () => {\n    if (score === 0) {\n      handleStartQuiz();\n    } else if (setQuizEnded(false)) ;\n    handleEndQuiz();\n  };\n\n  // maths function to convert seconds to 00:00 format\n  function secondsToHms(counter) {\n    let d = Number(counter);\n\n    // maths logic that returns minutes and seconds\n    if (d <= 0) {\n      return \"00:00:00\";\n    } else {\n      let m = Math.floor(d % 3600 / 60);\n      let s = Math.floor(d % 3600 % 60);\n      let mDisplay = m <= 9 ? \"0\" + m + \":\" : m + \":\";\n      let sDisplay = s <= 9 ? \"0\" + s : s;\n      return mDisplay + sDisplay;\n    }\n  }\n\n  // define a function to handle the timer tick\n  const handleTimerTick = () => {\n    if (!isPaused) {\n      // update the remaining time\n      setCounter(time => time - 1);\n    }\n  };\n  // start the timer when the component mounts\n  React.useEffect(() => {\n    const timer = setInterval(handleTimerTick, 1000);\n\n    // clean up the timer when the component unmounts\n    return () => clearInterval(timer);\n  }, [isPaused]);\n  React.useEffect(() => {\n    if (counter === 0) {\n      handleEndQuiz();\n    }\n  }, [counter]);\n  const handlePauseClick = () => {\n    setIsPaused(true);\n  };\n  const handlePlayClick = () => {\n    setIsPaused(false);\n  };\n  const allCountries = countriesData.map(country => {\n    return {\n      ...country,\n      isAnswered: answeredCountries.includes(country.country)\n    };\n  }).sort((a, b) => a.country.localeCompare(b.country));\n  return /*#__PURE__*/_jsxDEV(StyledContainer, {\n    maxWidth: \"md\",\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      id: \"country\",\n      label: \"Enter country here\",\n      variant: \"outlined\",\n      value: answer,\n      onChange: handleInputChange,\n      placeholder: \"Enter country here\",\n      helperText: helperText,\n      error: Boolean(helperText),\n      disabled: quizEnded,\n      sx: {\n        marginTop: 6\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledGrid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"Your current score is: \", score, \"/195\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledGrid1, {\n        item: true,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          item: true,\n          color: \"secondary\",\n          \"data-testid\": \"count\",\n          sx: {\n            maxWidth: 20\n          },\n          children: [\" \", /*#__PURE__*/_jsxDEV(AccessAlarmIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), \" \", secondsToHms(counter), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), isPaused ? /*#__PURE__*/_jsxDEV(StyledButton, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handlePlayClick,\n          disableElevation: true,\n          disableRipple: true,\n          children: /*#__PURE__*/_jsxDEV(PlayArrowIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(StyledButton, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handlePauseClick,\n          disableElevation: true,\n          disableRipple: true,\n          children: /*#__PURE__*/_jsxDEV(PauseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledGrid1, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleQuizButtonClick,\n          disableRipple: true,\n          children: score === 0 ? \"Start Quiz\" : \"End Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(StyledTableContainer, {\n          component: Paper,\n          children: /*#__PURE__*/_jsxDEV(StyledTable, {\n            \"aria-label\": \"simple table\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(StyledTableCell4, {\n                  align: \"center\",\n                  children: \"Continent\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"center\",\n                  children: \"Countries\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: Object.keys(groupedCountries).map(continent => /*#__PURE__*/_jsxDEV(TableRow, {\n                sx: {\n                  color: continent.isAnswered ? \"white\" : \"red\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(StyledTableCell4, {\n                  align: \"center\",\n                  children: continent\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: groupedCountries[continent].join(\", \")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 281,\n                  columnNumber: 21\n                }, this)]\n              }, continent, true, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"YiCr4NlN+jm1YnzP1oG1BnmBNCA=\");\n_c = Game;\nexport default Game;\n\n// const Game = () => {\n//     const [score, setScore] = useState(0);\n//     const [answer, setAnswer] = useState(\"\");\n//     const [currentCountry, setCurrentCountry] = useState(\"\");\n//     const [quizEnded, setQuizEnded] = useState(false);\n//     const [helperText, setHelperText] = useState(\"\");\n//     const [answeredCountries, setAnsweredCountries] = useState([]);\n//     const { counter, setCounter } = useContext(PlayerContext);\n//     const [isPaused, setIsPaused] = React.useState(false);\n//     //const formattedTime = startTimer(counter);\n//     const [previousCountry, setPreviousCountry] = useState(\"\");\n//     const [unansweredCountries, setUnansweredCountries] = useState([]);\n//     const [groupedCountries, setGroupedCountries] = useState({\n//       Africa: [],\n//       Antarctica: [],\n//       Asia: [],\n//       Europe: [],\n//       \"North America\": [],\n//       Oceania: [],\n//       \"South America\": [],\n//     });\n\n//     useEffect(() => {\n//       setAnsweredCountries(countriesData);\n//     }, []);\n\n//     useEffect(() => {\n//       const unanswered = countriesData.filter(\n//         (country) => !answeredCountries.includes(country.country)\n//       );\n//       setUnansweredCountries(\n//         unanswered.sort((a, b) => a.country.localeCompare(b.country))\n//       );\n//     }, [answeredCountries]);\n\n//     const handleInputChange = (event) => {\n//       const { value } = event.target;\n//       setAnswer(value);\n\n//       // Check if the user's answer matches any country in the JSON data\n//       const matchingCountry = countriesData.find(\n//         (country) => country.country.toLowerCase() === value.toLowerCase()\n//       );\n//       if (matchingCountry) {\n//         if (answeredCountries.includes(matchingCountry.country)) {\n//           // alert(\"You've already answered this country!\");\n//           setHelperText(`${matchingCountry.country} already entered`);\n//           return;\n//         } else if (matchingCountry.country === previousCountry) {\n//           setHelperText(\n//             `${matchingCountry.country} already entered. Enter a new country.`\n//           );\n//         } else {\n//           // If the user's answer matches a country, update the current country and reset the answer\n//           const updatedAnsweredCountries = [\n//             ...answeredCountries,\n//             matchingCountry.country,\n//           ].sort();\n//           setCurrentCountry(updatedAnsweredCountries);\n//           setPreviousCountry(matchingCountry.country);\n//           setAnswer(\"\");\n//           setScore(score + 1); // Update the score\n//           setAnsweredCountries(updatedAnsweredCountries);\n\n//           if (!unansweredCountries.includes(matchingCountry)) {\n//             setHelperText(\"\");\n//           } else {\n//             const filteredUnansweredCountries = unansweredCountries.filter(\n//               (country) => country.country !== matchingCountry.country\n//             );\n//             setUnansweredCountries(\n//               filteredUnansweredCountries.sort((a, b) =>\n//                 a.country.localeCompare(b.country)\n//               )\n//             );\n//             setHelperText(\"\");\n//           }\n\n//           // Update the grouped countries state with the new country\n//           const newGroupedCountries = { ...groupedCountries };\n//           const continent = matchingCountry.continent;\n//           newGroupedCountries[continent] = [\n//             ...newGroupedCountries[continent],\n//             matchingCountry.country,\n//           ].sort();\n//           setGroupedCountries(newGroupedCountries);\n//         }\n//       } else {\n//         setHelperText(\"\");\n//       }\n//     };\n\n//     const handleStartQuiz = () => {\n//       // reload page when \"start quiz\" button is clicked\n//       window.location.reload();\n//     };\n\n//     const handleEndQuiz = () => {\n//       setScore(0);\n//       setAnsweredCountries([]);\n//       setAnswer(\"\");\n//       setHelperText(\"\");\n//       setQuizEnded(true);\n//       // reload page when \"end quiz\" button is clicked\n//       //window.location.reload();\n//       setCounter(0);\n//     };\n\n//     const handleQuizButtonClick = () => {\n//       if (score === 0) {\n//         handleStartQuiz();\n//       }\n//       handleEndQuiz();\n//     };\n\n//     // maths function to convert seconds to 00:00 format\n//     function secondsToHms(counter) {\n//       let d = Number(counter);\n\n//       // maths logic that returns minutes and seconds\n//       if (d <= 0) {\n//         return \"00:00:00\";\n//       } else {\n//         let m = Math.floor((d % 3600) / 60);\n//         let s = Math.floor((d % 3600) % 60);\n\n//         let mDisplay = m <= 9 ? \"0\" + m + \":\" : m + \":\";\n//         let sDisplay = s <= 9 ? \"0\" + s : s;\n\n//         return mDisplay + sDisplay;\n//       }\n//     }\n\n//     // define a function to handle the timer tick\n//     const handleTimerTick = () => {\n//       if (!isPaused) {\n//         // update the remaining time\n//         setCounter((time) => time - 1);\n//       }\n//     };\n//     // start the timer when the component mounts\n//     React.useEffect(() => {\n//       const timer = setInterval(handleTimerTick, 1000);\n\n//       // clean up the timer when the component unmounts\n//       return () => clearInterval(timer);\n//     }, [isPaused]);\n//     React.useEffect(() => {\n//       if (counter === 0) {\n//         handleEndQuiz();\n//       }\n//     }, [counter]);\n\n//     const handlePauseClick = () => {\n//       setIsPaused(true);\n//     };\n\n//     const handlePlayClick = () => {\n//       setIsPaused(false);\n//     };\n\n//     const allCountries = countriesData\n//       .map((country) => {\n//         return {\n//           ...country,\n//           isAnswered: answeredCountries.includes(country.country),\n//         };\n//       })\n//       .sort((a, b) => a.country.localeCompare(b.country));\n\n//     return (\n//       <StyledContainer maxWidth=\"md\">\n//         <TextField\n//           id=\"country\"\n//           label=\"Enter country here\"\n//           variant=\"outlined\"\n//           value={answer}\n//           onChange={handleInputChange}\n//           placeholder=\"Enter country here\"\n//           helperText={helperText}\n//           error={Boolean(helperText)}\n//           disabled={quizEnded}\n//           sx={{ marginTop: 6 }}\n//         />\n//         <StyledGrid container>\n//           <Grid item>\n//             <Typography>Your current score is: {score}/195</Typography>\n//           </Grid>\n//           <StyledGrid1 item>\n//             <Button\n//               item\n//               color=\"secondary\"\n//               data-testid=\"count\"\n//               sx={{ maxWidth: 20 }}\n//             >\n//               {\" \"}\n//               <AccessAlarmIcon /> {secondsToHms(counter)}{\" \"}\n//             </Button>\n//             {isPaused ? (\n//               <StyledButton\n//                 variant=\"contained\"\n//                 color=\"primary\"\n//                 onClick={handlePlayClick}\n//                 disableElevation\n//                 disableRipple\n//               >\n//                 <PlayArrowIcon />\n//               </StyledButton>\n//             ) : (\n//               <StyledButton\n//                 variant=\"contained\"\n//                 color=\"primary\"\n//                 onClick={handlePauseClick}\n//                 disableElevation\n//                 disableRipple\n//               >\n//                 <PauseIcon />\n//               </StyledButton>\n//             )}\n//           </StyledGrid1>\n//           <StyledGrid1 item>\n//             <Button\n//               variant=\"contained\"\n//               color=\"primary\"\n//               onClick={handleQuizButtonClick}\n//               disableRipple\n//             >\n//               {score === 0 ? \"Start Quiz\" : \"End Quiz\"}\n//             </Button>\n//           </StyledGrid1>\n//         </StyledGrid>\n//         <Grid>\n//           <Grid item>\n//             <StyledTableContainer component={Paper}>\n//               <StyledTable aria-label=\"simple table\">\n//                 <TableHead>\n//                   <TableRow>\n//                     <StyledTableCell4 align=\"center\">Continent</StyledTableCell4>\n//                     <TableCell align=\"center\">Countries</TableCell>\n//                   </TableRow>\n//                 </TableHead>\n//                 <TableBody>\n//                   {Object.keys(groupedCountries).map((continent) => (\n//                     <TableRow\n//                       key={continent}\n//                       sx={{ color: continent.isAnswered ? \"white\" : \"red\" }}\n//                     >\n//                       <StyledTableCell4 align=\"center\">\n//                         {continent}\n//                       </StyledTableCell4>\n//                       <TableCell>\n//                         {groupedCountries[continent].join(\", \")}\n//                       </TableCell>\n//                     </TableRow>\n//                   ))}\n//                 </TableBody>\n//               </StyledTable>\n//             </StyledTableContainer>\n//           </Grid>\n//         </Grid>\n//       </StyledContainer>\n//     );\n//   };\n\n//   export default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Button","Grid","Paper","TableBody","TableCell","TableHead","TableRow","Typography","TextField","StyledButton","StyledContainer","StyledGrid","StyledGrid1","StyledTable","StyledTableCell4","StyledTableContainer","AccessAlarmIcon","PlayerContext","countriesData","PlayArrowIcon","PauseIcon","jsxDEV","_jsxDEV","Game","_s","score","setScore","answer","setAnswer","currentCountry","setCurrentCountry","quizEnded","setQuizEnded","helperText","setHelperText","answeredCountries","setAnsweredCountries","counter","setCounter","isPaused","setIsPaused","previousCountry","setPreviousCountry","unansweredCountries","setUnansweredCountries","groupedCountries","setGroupedCountries","Africa","Antarctica","Asia","Europe","Oceania","unanswered","filter","country","includes","sort","a","b","localeCompare","handleInputChange","event","value","target","matchingCountry","find","toLowerCase","updatedAnsweredCountries","filteredUnansweredCountries","newGroupedCountries","continent","handleStartQuiz","window","location","reload","handleEndQuiz","handleQuizButtonClick","secondsToHms","d","Number","m","Math","floor","s","mDisplay","sDisplay","handleTimerTick","time","timer","setInterval","clearInterval","handlePauseClick","handlePlayClick","allCountries","map","isAnswered","maxWidth","children","id","label","variant","onChange","placeholder","error","Boolean","disabled","sx","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","container","item","color","onClick","disableElevation","disableRipple","component","align","Object","keys","join","_c","$RefreshReg$"],"sources":["/Users/Meca/Documents/Web Projects/world-quiz/src/containers/Game/game.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Paper,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@mui/material\";\nimport TextField from \"@mui/material/TextField\";\nimport {\n  StyledButton,\n  StyledContainer,\n  StyledGrid,\n  StyledGrid1,\n  StyledTable,\n  StyledTableCell4,\n  StyledTableContainer,\n} from \"../../styles/game\";\nimport AccessAlarmIcon from \"@mui/icons-material/AccessAlarm\";\nimport { PlayerContext } from \"./PlayerContext\";\nimport countriesData from \"../../scripts/countries.json\";\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\nimport PauseIcon from \"@mui/icons-material/Pause\";\n//import startTimer from \"./timer\";\n\nconst Game = () => {\n  const [score, setScore] = useState(0);\n  const [answer, setAnswer] = useState(\"\");\n  const [currentCountry, setCurrentCountry] = useState(\"\");\n  const [quizEnded, setQuizEnded] = useState(false);\n  const [helperText, setHelperText] = useState(\"\");\n  const [answeredCountries, setAnsweredCountries] = useState([]);\n  const { counter, setCounter } = useContext(PlayerContext);\n  const [isPaused, setIsPaused] = React.useState(false);\n  //const formattedTime = startTimer(counter);\n  const [previousCountry, setPreviousCountry] = useState(\"\");\n  const [unansweredCountries, setUnansweredCountries] = useState([]);\n  const [groupedCountries, setGroupedCountries] = useState({\n    Africa: [],\n    Antarctica: [],\n    Asia: [],\n    Europe: [],\n    \"North America\": [],\n    Oceania: [],\n    \"South America\": [],\n  });\n\n  useEffect(() => {\n    setAnsweredCountries(countriesData);\n  }, []);\n\n  useEffect(() => {\n    const unanswered = countriesData.filter(\n      (country) => !answeredCountries.includes(country.country)\n    );\n    setUnansweredCountries(\n      unanswered.sort((a, b) => a.country.localeCompare(b.country))\n    );\n  }, [answeredCountries]);\n\n  const handleInputChange = (event) => {\n    const { value } = event.target;\n    setAnswer(value);\n\n    // Check if the user's answer matches any country in the JSON data\n    const matchingCountry = countriesData.find(\n      (country) => country.country.toLowerCase() === value.toLowerCase()\n    );\n    if (matchingCountry) {\n      if (answeredCountries.includes(matchingCountry.country)) {\n        // alert(\"You've already answered this country!\");\n        setHelperText(`${matchingCountry.country} already entered`);\n        return;\n      } else if (matchingCountry.country === previousCountry) {\n        setHelperText(\n          `${matchingCountry.country} already entered. Enter a new country.`\n        );\n      } else {\n        // If the user's answer matches a country, update the current country and reset the answer\n        const updatedAnsweredCountries = [\n          ...answeredCountries,\n          matchingCountry.country,\n        ].sort();\n        setCurrentCountry(matchingCountry.country);\n        setPreviousCountry(matchingCountry.country);\n        setAnswer(\"\");\n        setScore(score + 1); // Update the score\n        setAnsweredCountries(updatedAnsweredCountries);\n\n        if (!unansweredCountries.includes(matchingCountry)) {\n          setHelperText(\"\");\n        } else {\n          const filteredUnansweredCountries = unansweredCountries.filter(\n            (country) => country.country !== matchingCountry.country\n          );\n          setUnansweredCountries(\n            filteredUnansweredCountries.sort((a, b) =>\n              a.country.localeCompare(b.country)\n            )\n          );\n          setHelperText(\"\");\n        }\n\n        // Update the grouped countries state with the new country\n        const newGroupedCountries = { ...groupedCountries };\n        const continent = matchingCountry.continent;\n        newGroupedCountries[continent] = [\n          ...newGroupedCountries[continent],\n          matchingCountry.country,\n        ].sort();\n        setGroupedCountries(newGroupedCountries);\n      }\n    } else {\n      setHelperText(\"\");\n    }\n  };\n\n  const handleStartQuiz = () => {\n    // reload page when \"start quiz\" button is clicked\n    window.location.reload();\n  };\n\n  /*In the handleQuizButtonClick function, the handleEndQuiz function should not be called if quizEnded is already true. */\n\n  const handleEndQuiz = () => {\n    setScore(0);\n    setAnsweredCountries([]);\n    setAnswer(\"\");\n    setHelperText(\"\");\n    setQuizEnded(true);\n    // reload page when \"end quiz\" button is clicked\n    //window.location.reload();\n    setCounter(0);\n  };\n\n  const handleQuizButtonClick = () => {\n    if (score === 0) {\n      handleStartQuiz();\n    } else if (setQuizEnded(false));\n    handleEndQuiz();\n  };\n\n  // maths function to convert seconds to 00:00 format\n  function secondsToHms(counter) {\n    let d = Number(counter);\n\n    // maths logic that returns minutes and seconds\n    if (d <= 0) {\n      return \"00:00:00\";\n    } else {\n      let m = Math.floor((d % 3600) / 60);\n      let s = Math.floor((d % 3600) % 60);\n\n      let mDisplay = m <= 9 ? \"0\" + m + \":\" : m + \":\";\n      let sDisplay = s <= 9 ? \"0\" + s : s;\n\n      return mDisplay + sDisplay;\n    }\n  }\n\n  // define a function to handle the timer tick\n  const handleTimerTick = () => {\n    if (!isPaused) {\n      // update the remaining time\n      setCounter((time) => time - 1);\n    }\n  };\n  // start the timer when the component mounts\n  React.useEffect(() => {\n    const timer = setInterval(handleTimerTick, 1000);\n\n    // clean up the timer when the component unmounts\n    return () => clearInterval(timer);\n  }, [isPaused]);\n  React.useEffect(() => {\n    if (counter === 0) {\n      handleEndQuiz();\n    }\n  }, [counter]);\n\n  const handlePauseClick = () => {\n    setIsPaused(true);\n  };\n\n  const handlePlayClick = () => {\n    setIsPaused(false);\n  };\n\n  const allCountries = countriesData\n    .map((country) => {\n      return {\n        ...country,\n        isAnswered: answeredCountries.includes(country.country),\n      };\n    })\n    .sort((a, b) => a.country.localeCompare(b.country));\n\n  return (\n    <StyledContainer maxWidth=\"md\">\n      <TextField\n        id=\"country\"\n        label=\"Enter country here\"\n        variant=\"outlined\"\n        value={answer}\n        onChange={handleInputChange}\n        placeholder=\"Enter country here\"\n        helperText={helperText}\n        error={Boolean(helperText)}\n        disabled={quizEnded}\n        sx={{ marginTop: 6 }}\n      />\n      <StyledGrid container>\n        <Grid item>\n          <Typography>Your current score is: {score}/195</Typography>\n        </Grid>\n        <StyledGrid1 item>\n          <Button\n            item\n            color=\"secondary\"\n            data-testid=\"count\"\n            sx={{ maxWidth: 20 }}\n          >\n            {\" \"}\n            <AccessAlarmIcon /> {secondsToHms(counter)}{\" \"}\n          </Button>\n          {isPaused ? (\n            <StyledButton\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handlePlayClick}\n              disableElevation\n              disableRipple\n            >\n              <PlayArrowIcon />\n            </StyledButton>\n          ) : (\n            <StyledButton\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handlePauseClick}\n              disableElevation\n              disableRipple\n            >\n              <PauseIcon />\n            </StyledButton>\n          )}\n        </StyledGrid1>\n        <StyledGrid1 item>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleQuizButtonClick}\n            disableRipple\n          >\n            {score === 0 ? \"Start Quiz\" : \"End Quiz\"}\n          </Button>\n        </StyledGrid1>\n      </StyledGrid>\n      <Grid>\n        <Grid item>\n          <StyledTableContainer component={Paper}>\n            <StyledTable aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <StyledTableCell4 align=\"center\">Continent</StyledTableCell4>\n                  <TableCell align=\"center\">Countries</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {Object.keys(groupedCountries).map((continent) => (\n                  <TableRow\n                    key={continent}\n                    sx={{ color: continent.isAnswered ? \"white\" : \"red\" }}\n                  >\n                    <StyledTableCell4 align=\"center\">\n                      {continent}\n                    </StyledTableCell4>\n                    <TableCell>\n                      {groupedCountries[continent].join(\", \")}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </StyledTable>\n          </StyledTableContainer>\n        </Grid>\n      </Grid>\n    </StyledContainer>\n  );\n};\n\nexport default Game;\n\n// const Game = () => {\n//     const [score, setScore] = useState(0);\n//     const [answer, setAnswer] = useState(\"\");\n//     const [currentCountry, setCurrentCountry] = useState(\"\");\n//     const [quizEnded, setQuizEnded] = useState(false);\n//     const [helperText, setHelperText] = useState(\"\");\n//     const [answeredCountries, setAnsweredCountries] = useState([]);\n//     const { counter, setCounter } = useContext(PlayerContext);\n//     const [isPaused, setIsPaused] = React.useState(false);\n//     //const formattedTime = startTimer(counter);\n//     const [previousCountry, setPreviousCountry] = useState(\"\");\n//     const [unansweredCountries, setUnansweredCountries] = useState([]);\n//     const [groupedCountries, setGroupedCountries] = useState({\n//       Africa: [],\n//       Antarctica: [],\n//       Asia: [],\n//       Europe: [],\n//       \"North America\": [],\n//       Oceania: [],\n//       \"South America\": [],\n//     });\n\n//     useEffect(() => {\n//       setAnsweredCountries(countriesData);\n//     }, []);\n\n//     useEffect(() => {\n//       const unanswered = countriesData.filter(\n//         (country) => !answeredCountries.includes(country.country)\n//       );\n//       setUnansweredCountries(\n//         unanswered.sort((a, b) => a.country.localeCompare(b.country))\n//       );\n//     }, [answeredCountries]);\n\n//     const handleInputChange = (event) => {\n//       const { value } = event.target;\n//       setAnswer(value);\n\n//       // Check if the user's answer matches any country in the JSON data\n//       const matchingCountry = countriesData.find(\n//         (country) => country.country.toLowerCase() === value.toLowerCase()\n//       );\n//       if (matchingCountry) {\n//         if (answeredCountries.includes(matchingCountry.country)) {\n//           // alert(\"You've already answered this country!\");\n//           setHelperText(`${matchingCountry.country} already entered`);\n//           return;\n//         } else if (matchingCountry.country === previousCountry) {\n//           setHelperText(\n//             `${matchingCountry.country} already entered. Enter a new country.`\n//           );\n//         } else {\n//           // If the user's answer matches a country, update the current country and reset the answer\n//           const updatedAnsweredCountries = [\n//             ...answeredCountries,\n//             matchingCountry.country,\n//           ].sort();\n//           setCurrentCountry(updatedAnsweredCountries);\n//           setPreviousCountry(matchingCountry.country);\n//           setAnswer(\"\");\n//           setScore(score + 1); // Update the score\n//           setAnsweredCountries(updatedAnsweredCountries);\n\n//           if (!unansweredCountries.includes(matchingCountry)) {\n//             setHelperText(\"\");\n//           } else {\n//             const filteredUnansweredCountries = unansweredCountries.filter(\n//               (country) => country.country !== matchingCountry.country\n//             );\n//             setUnansweredCountries(\n//               filteredUnansweredCountries.sort((a, b) =>\n//                 a.country.localeCompare(b.country)\n//               )\n//             );\n//             setHelperText(\"\");\n//           }\n\n//           // Update the grouped countries state with the new country\n//           const newGroupedCountries = { ...groupedCountries };\n//           const continent = matchingCountry.continent;\n//           newGroupedCountries[continent] = [\n//             ...newGroupedCountries[continent],\n//             matchingCountry.country,\n//           ].sort();\n//           setGroupedCountries(newGroupedCountries);\n//         }\n//       } else {\n//         setHelperText(\"\");\n//       }\n//     };\n\n//     const handleStartQuiz = () => {\n//       // reload page when \"start quiz\" button is clicked\n//       window.location.reload();\n//     };\n\n//     const handleEndQuiz = () => {\n//       setScore(0);\n//       setAnsweredCountries([]);\n//       setAnswer(\"\");\n//       setHelperText(\"\");\n//       setQuizEnded(true);\n//       // reload page when \"end quiz\" button is clicked\n//       //window.location.reload();\n//       setCounter(0);\n//     };\n\n//     const handleQuizButtonClick = () => {\n//       if (score === 0) {\n//         handleStartQuiz();\n//       }\n//       handleEndQuiz();\n//     };\n\n//     // maths function to convert seconds to 00:00 format\n//     function secondsToHms(counter) {\n//       let d = Number(counter);\n\n//       // maths logic that returns minutes and seconds\n//       if (d <= 0) {\n//         return \"00:00:00\";\n//       } else {\n//         let m = Math.floor((d % 3600) / 60);\n//         let s = Math.floor((d % 3600) % 60);\n\n//         let mDisplay = m <= 9 ? \"0\" + m + \":\" : m + \":\";\n//         let sDisplay = s <= 9 ? \"0\" + s : s;\n\n//         return mDisplay + sDisplay;\n//       }\n//     }\n\n//     // define a function to handle the timer tick\n//     const handleTimerTick = () => {\n//       if (!isPaused) {\n//         // update the remaining time\n//         setCounter((time) => time - 1);\n//       }\n//     };\n//     // start the timer when the component mounts\n//     React.useEffect(() => {\n//       const timer = setInterval(handleTimerTick, 1000);\n\n//       // clean up the timer when the component unmounts\n//       return () => clearInterval(timer);\n//     }, [isPaused]);\n//     React.useEffect(() => {\n//       if (counter === 0) {\n//         handleEndQuiz();\n//       }\n//     }, [counter]);\n\n//     const handlePauseClick = () => {\n//       setIsPaused(true);\n//     };\n\n//     const handlePlayClick = () => {\n//       setIsPaused(false);\n//     };\n\n//     const allCountries = countriesData\n//       .map((country) => {\n//         return {\n//           ...country,\n//           isAnswered: answeredCountries.includes(country.country),\n//         };\n//       })\n//       .sort((a, b) => a.country.localeCompare(b.country));\n\n//     return (\n//       <StyledContainer maxWidth=\"md\">\n//         <TextField\n//           id=\"country\"\n//           label=\"Enter country here\"\n//           variant=\"outlined\"\n//           value={answer}\n//           onChange={handleInputChange}\n//           placeholder=\"Enter country here\"\n//           helperText={helperText}\n//           error={Boolean(helperText)}\n//           disabled={quizEnded}\n//           sx={{ marginTop: 6 }}\n//         />\n//         <StyledGrid container>\n//           <Grid item>\n//             <Typography>Your current score is: {score}/195</Typography>\n//           </Grid>\n//           <StyledGrid1 item>\n//             <Button\n//               item\n//               color=\"secondary\"\n//               data-testid=\"count\"\n//               sx={{ maxWidth: 20 }}\n//             >\n//               {\" \"}\n//               <AccessAlarmIcon /> {secondsToHms(counter)}{\" \"}\n//             </Button>\n//             {isPaused ? (\n//               <StyledButton\n//                 variant=\"contained\"\n//                 color=\"primary\"\n//                 onClick={handlePlayClick}\n//                 disableElevation\n//                 disableRipple\n//               >\n//                 <PlayArrowIcon />\n//               </StyledButton>\n//             ) : (\n//               <StyledButton\n//                 variant=\"contained\"\n//                 color=\"primary\"\n//                 onClick={handlePauseClick}\n//                 disableElevation\n//                 disableRipple\n//               >\n//                 <PauseIcon />\n//               </StyledButton>\n//             )}\n//           </StyledGrid1>\n//           <StyledGrid1 item>\n//             <Button\n//               variant=\"contained\"\n//               color=\"primary\"\n//               onClick={handleQuizButtonClick}\n//               disableRipple\n//             >\n//               {score === 0 ? \"Start Quiz\" : \"End Quiz\"}\n//             </Button>\n//           </StyledGrid1>\n//         </StyledGrid>\n//         <Grid>\n//           <Grid item>\n//             <StyledTableContainer component={Paper}>\n//               <StyledTable aria-label=\"simple table\">\n//                 <TableHead>\n//                   <TableRow>\n//                     <StyledTableCell4 align=\"center\">Continent</StyledTableCell4>\n//                     <TableCell align=\"center\">Countries</TableCell>\n//                   </TableRow>\n//                 </TableHead>\n//                 <TableBody>\n//                   {Object.keys(groupedCountries).map((continent) => (\n//                     <TableRow\n//                       key={continent}\n//                       sx={{ color: continent.isAnswered ? \"white\" : \"red\" }}\n//                     >\n//                       <StyledTableCell4 align=\"center\">\n//                         {continent}\n//                       </StyledTableCell4>\n//                       <TableCell>\n//                         {groupedCountries[continent].join(\", \")}\n//                       </TableCell>\n//                     </TableRow>\n//                   ))}\n//                 </TableBody>\n//               </StyledTable>\n//             </StyledTableContainer>\n//           </Grid>\n//         </Grid>\n//       </StyledContainer>\n//     );\n//   };\n\n//   export default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}