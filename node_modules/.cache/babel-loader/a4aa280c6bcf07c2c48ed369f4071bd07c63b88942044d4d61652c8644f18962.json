{"ast":null,"code":"var _jsxFileName = \"/Users/Meca/Documents/Web Projects/world-quiz/src/containers/Game/game.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Button, Grid, Paper, TableBody, TableCell, TableHead, TableRow, Typography } from \"@mui/material\";\nimport TextField from '@mui/material/TextField';\nimport { StyledContainer, StyledGrid, StyledGrid1, StyledTable, StyledTableCell4, StyledTableContainer } from \"../../styles/game\";\nimport AccessAlarmIcon from \"@mui/icons-material/AccessAlarm\";\nimport { PlayerContext } from \"./PlayerContext\";\nimport countriesData from \"../../scripts/countries.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [score, setScore] = useState(0);\n  const [answer, setAnswer] = useState(\"\");\n  const [currentCountry, setCurrentCountry] = useState(\"\");\n  const [quizEnded, setQuizEnded] = useState(false);\n  const [helperText, setHelperText] = useState(\"\");\n  const [answeredCountries, setAnsweredCountries] = useState([]);\n  const {\n    counter,\n    setCounter\n  } = useContext(PlayerContext);\n  const [previousCountry, setPreviousCountry] = useState(\"\");\n  const [unansweredCountries, setUnansweredCountries] = useState([]);\n  const [groupedCountries, setGroupedCountries] = useState({\n    Africa: [],\n    Antarctica: [],\n    Asia: [],\n    Europe: [],\n    \"North America\": [],\n    Oceania: [],\n    \"South America\": []\n  });\n  useEffect(() => {\n    setAnsweredCountries(countriesData);\n  }, []);\n  useEffect(() => {\n    const unanswered = countriesData.filter(country => !answeredCountries.includes(country.country));\n    setUnansweredCountries(unanswered.sort((a, b) => a.country.localeCompare(b.country)));\n  }, [answeredCountries]);\n  const handleInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setAnswer(value);\n\n    // Check if the user's answer matches any country in the JSON data\n    const matchingCountry = countriesData.find(country => country.country.toLowerCase() === value.toLowerCase());\n    if (matchingCountry) {\n      if (answeredCountries.includes(matchingCountry.country)) {\n        // alert(\"You've already answered this country!\");\n        setHelperText(`${matchingCountry.country} already entered`);\n        return;\n      } else if (matchingCountry.country === previousCountry) {\n        setHelperText(`${matchingCountry.country} already entered. Enter a new country.`);\n      } else {\n        // If the user's answer matches a country, update the current country and reset the answer\n        const updatedAnsweredCountries = [...answeredCountries, matchingCountry.country].sort();\n        setCurrentCountry(updatedAnsweredCountries);\n        setPreviousCountry(matchingCountry.country);\n        setAnswer(\"\");\n        setScore(score + 1); // Update the score\n        setAnsweredCountries(updatedAnsweredCountries);\n\n        // Update the grouped countries state with the new country\n        const newGroupedCountries = {\n          ...groupedCountries\n        };\n        const continent = matchingCountry.continent;\n        newGroupedCountries[continent] = [...newGroupedCountries[continent], matchingCountry.country].sort();\n        setGroupedCountries(newGroupedCountries);\n      }\n    } else {\n      setHelperText(\"\");\n    }\n  };\n  const handleEndQuiz = () => {\n    setScore(0);\n    setAnsweredCountries([]);\n    setAnswer(\"\");\n    setHelperText(\"\");\n    setQuizEnded(true);\n    // reload page when \"end quiz\" button is clicked\n    // window.location.reload();\n  };\n\n  // maths function to convert seconds to 00:00 format\n  function secondsToHms(counter) {\n    let d = Number(counter);\n\n    // maths logic that returns minutes and seconds\n    if (d <= 0) {\n      return \"00:00:00\";\n    } else {\n      let m = Math.floor(d % 3600 / 60);\n      let s = Math.floor(d % 3600 % 60);\n      let mDisplay = m <= 9 ? \"0\" + m + \":\" : m + \":\";\n      let sDisplay = s <= 9 ? \"0\" + s : s;\n      return mDisplay + sDisplay;\n    }\n  }\n\n  // define a function to handle the timer tick\n  const handleTimerTick = () => {\n    // update the remaining time\n    setCounter(time => time - 1);\n  };\n  // start the timer when the component mounts\n  React.useEffect(() => {\n    const timer = setInterval(handleTimerTick, 1000);\n\n    // clean up the timer when the component unmounts\n    return () => clearInterval(timer);\n  }, []);\n  React.useEffect(() => {\n    if (counter === 0) {\n      handleEndQuiz();\n    }\n  }, [counter]);\n  return /*#__PURE__*/_jsxDEV(StyledContainer, {\n    maxWidth: \"md\",\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      id: \"country\",\n      label: \"Enter country here\",\n      variant: \"outlined\",\n      value: answer,\n      onChange: handleInputChange,\n      placeholder: \"Enter country here\",\n      helperText: helperText,\n      error: Boolean(helperText),\n      disabled: quizEnded,\n      sx: {\n        marginTop: 6\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(StyledGrid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"Your current score is: \", score, \"/195\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StyledGrid1, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          item: true,\n          color: \"secondary\",\n          \"data-testid\": \"count\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(AccessAlarmIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this), \" \", secondsToHms(counter), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleEndQuiz,\n          children: score === 0 ? \"Start Quiz\" : \"End Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(StyledTableContainer, {\n          component: Paper,\n          children: /*#__PURE__*/_jsxDEV(StyledTable, {\n            \"aria-label\": \"simple table\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(StyledTableCell4, {\n                  align: \"center\",\n                  children: \"Continent\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"center\",\n                  children: \"Countries\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: [Object.keys(groupedCountries).map(continent => groupedCountries[continent].length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(StyledTableRow2, {\n                  children: [/*#__PURE__*/_jsxDEV(StyledTableCell4, {\n                    align: \"center\",\n                    children: continent\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 191,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"center\",\n                    children: groupedCountries[continent].join(\", \")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 192,\n                    columnNumber: 49\n                  }, this)]\n                }, continent, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false) : null), unansweredCountries.map(country => /*#__PURE__*/_jsxDEV(StyledTableRow2, {\n                className: \"unanswered\",\n                children: [/*#__PURE__*/_jsxDEV(StyledTableCell4, {\n                  align: \"center\",\n                  children: country.continent\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"center\",\n                  children: country.country\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 41\n                }, this)]\n              }, country.country, true, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 37\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"bdWXh/GkzgO5gM88FvXg2BokRPw=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Button","Grid","Paper","TableBody","TableCell","TableHead","TableRow","Typography","TextField","StyledContainer","StyledGrid","StyledGrid1","StyledTable","StyledTableCell4","StyledTableContainer","AccessAlarmIcon","PlayerContext","countriesData","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","score","setScore","answer","setAnswer","currentCountry","setCurrentCountry","quizEnded","setQuizEnded","helperText","setHelperText","answeredCountries","setAnsweredCountries","counter","setCounter","previousCountry","setPreviousCountry","unansweredCountries","setUnansweredCountries","groupedCountries","setGroupedCountries","Africa","Antarctica","Asia","Europe","Oceania","unanswered","filter","country","includes","sort","a","b","localeCompare","handleInputChange","event","value","target","matchingCountry","find","toLowerCase","updatedAnsweredCountries","newGroupedCountries","continent","handleEndQuiz","secondsToHms","d","Number","m","Math","floor","s","mDisplay","sDisplay","handleTimerTick","time","timer","setInterval","clearInterval","maxWidth","children","id","label","variant","onChange","placeholder","error","Boolean","disabled","sx","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","container","item","color","onClick","component","align","Object","keys","map","length","StyledTableRow2","join","className","_c","$RefreshReg$"],"sources":["/Users/Meca/Documents/Web Projects/world-quiz/src/containers/Game/game.js"],"sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport {\n    Button,\n    Grid,\n    Paper,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    Typography\n} from \"@mui/material\";\nimport TextField from '@mui/material/TextField';\nimport {\n    StyledContainer,\n    StyledGrid,\n    StyledGrid1,\n    StyledTable,\n    StyledTableCell4, StyledTableContainer\n} from \"../../styles/game\";\nimport AccessAlarmIcon from \"@mui/icons-material/AccessAlarm\";\nimport {PlayerContext} from \"./PlayerContext\";\nimport countriesData from \"../../scripts/countries.json\";\n\nconst Game = () => {\n\n    const [score, setScore] = useState(0);\n    const [answer, setAnswer] = useState(\"\");\n    const [currentCountry, setCurrentCountry] = useState(\"\");\n    const [quizEnded, setQuizEnded] = useState(false);\n    const [helperText, setHelperText] = useState(\"\");\n    const [answeredCountries, setAnsweredCountries] = useState([]);\n    const { counter, setCounter } = useContext(PlayerContext);\n    const [previousCountry, setPreviousCountry] = useState(\"\");\n    const [unansweredCountries, setUnansweredCountries] = useState([]);\n    const [groupedCountries, setGroupedCountries] = useState({Africa: [],\n        Antarctica: [],\n        Asia: [],\n        Europe: [],\n        \"North America\": [],\n        Oceania: [],\n        \"South America\": [],\n    });\n\n    useEffect(() => {\n        setAnsweredCountries(countriesData);\n    }, []);\n\n    useEffect(() => {\n        const unanswered = countriesData.filter(country => !answeredCountries.includes(country.country));\n        setUnansweredCountries(unanswered.sort((a, b) => a.country.localeCompare(b.country)));\n    }, [answeredCountries]);\n\n    const handleInputChange = (event) => {\n        const {value} = event.target;\n        setAnswer(value);\n\n        // Check if the user's answer matches any country in the JSON data\n        const matchingCountry = countriesData.find(\n            (country) => country.country.toLowerCase() === value.toLowerCase()\n        );\n        if (matchingCountry) {\n            if (answeredCountries.includes(matchingCountry.country)) {\n                // alert(\"You've already answered this country!\");\n                setHelperText(`${matchingCountry.country} already entered`);\n                return;\n            } else if (matchingCountry.country === previousCountry) {\n                setHelperText(`${matchingCountry.country} already entered. Enter a new country.`);\n            } else {\n                // If the user's answer matches a country, update the current country and reset the answer\n                const updatedAnsweredCountries = [...answeredCountries, matchingCountry.country].sort();\n                setCurrentCountry(updatedAnsweredCountries);\n                setPreviousCountry(matchingCountry.country);\n                setAnswer(\"\");\n                setScore(score + 1); // Update the score\n                setAnsweredCountries(updatedAnsweredCountries);\n\n                // Update the grouped countries state with the new country\n                const newGroupedCountries = { ...groupedCountries };\n                const continent = matchingCountry.continent;\n                newGroupedCountries[continent] = [\n                    ...newGroupedCountries[continent],\n                    matchingCountry.country,\n                ].sort();\n                setGroupedCountries(newGroupedCountries);\n            }\n        } else {\n            setHelperText(\"\");\n        }\n    };\n\n    const handleEndQuiz = () => {\n        setScore(0);\n        setAnsweredCountries([]);\n        setAnswer(\"\");\n        setHelperText(\"\");\n        setQuizEnded(true);\n        // reload page when \"end quiz\" button is clicked\n       // window.location.reload();\n    };\n\n    // maths function to convert seconds to 00:00 format\n    function secondsToHms(counter) {\n        let d = Number(counter);\n\n        // maths logic that returns minutes and seconds\n        if (d <= 0) {\n            return \"00:00:00\";\n        } else {\n            let m = Math.floor((d % 3600) / 60);\n            let s = Math.floor((d % 3600) % 60);\n\n            let mDisplay = m <= 9 ? \"0\" + m + \":\" : m + \":\";\n            let sDisplay = s <= 9 ? \"0\" + s : s;\n\n            return mDisplay + sDisplay;\n        }\n    }\n\n    // define a function to handle the timer tick\n    const handleTimerTick = () => {\n        // update the remaining time\n        setCounter((time) => time - 1);\n    };\n    // start the timer when the component mounts\n    React.useEffect(() => {\n        const timer = setInterval(handleTimerTick, 1000);\n\n        // clean up the timer when the component unmounts\n        return () => clearInterval(timer);\n    }, []);\n    React.useEffect(() => {\n        if (counter === 0) {\n            handleEndQuiz();\n        }\n    }, [counter]);\n\n    return (\n        <StyledContainer maxWidth=\"md\">\n            <TextField\n                id=\"country\"\n                label=\"Enter country here\"\n                variant=\"outlined\"\n                value={answer}\n                onChange={handleInputChange}\n                placeholder=\"Enter country here\"\n                helperText={helperText}\n                error={Boolean(helperText)}\n                disabled={quizEnded}\n                sx={{marginTop: 6}}\n            />\n            <StyledGrid container>\n                <Grid item>\n                    <Typography>Your current score is: {score}/195</Typography>\n                </Grid>\n                <StyledGrid1 item>\n                    <Button item color=\"secondary\" data-testid=\"count\">\n                        {\" \"}\n                        <AccessAlarmIcon /> {secondsToHms(counter)}{\" \"}\n                    </Button>\n                </StyledGrid1>\n                <Grid item>\n                        <Button variant=\"contained\" color=\"primary\"\n                                onClick={handleEndQuiz}>\n                            {score === 0 ? \"Start Quiz\" : \"End Quiz\"}\n                        </Button>\n                </Grid>\n            </StyledGrid>\n            <Grid>\n                <Grid item>\n                    <StyledTableContainer component={Paper}>\n                        <StyledTable aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <StyledTableCell4 align=\"center\">Continent</StyledTableCell4>\n                                    <TableCell align=\"center\">Countries</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            {/*<TableBody>*/}\n                            {/*    {Object.keys(groupedCountries).map((continent) => (*/}\n                            {/*        <TableRow key={continent}>*/}\n                            {/*            <StyledTableCell4 align=\"center\">{continent}</StyledTableCell4>*/}\n                            {/*            <TableCell>{groupedCountries[continent].join(\", \")}</TableCell>*/}\n                            {/*        </TableRow>*/}\n                            {/*    ))}*/}\n                            {/*</TableBody>*/}\n                            <TableBody>\n                                {Object.keys(groupedCountries).map((continent) =>\n                                    groupedCountries[continent].length > 0 ? (\n                                        <>\n                                            <StyledTableRow2 key={continent}>\n                                                <StyledTableCell4 align=\"center\">{continent}</StyledTableCell4>\n                                                <TableCell align=\"center\">\n                                                    {groupedCountries[continent].join(\", \")}\n                                                </TableCell>\n                                            </StyledTableRow2>\n                                        </>\n                                    ) : null\n                                )}\n                                {unansweredCountries.map((country) => (\n                                    <StyledTableRow2 key={country.country} className=\"unanswered\">\n                                        <StyledTableCell4 align=\"center\">{country.continent}</StyledTableCell4>\n                                        <TableCell align=\"center\">{country.country}</TableCell>\n                                    </StyledTableRow2>\n                                ))}\n                            </TableBody>\n                        </StyledTable>\n                    </StyledTableContainer>\n                </Grid>\n            </Grid>\n        </StyledContainer>\n    );\n};\n\nexport default Game;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}